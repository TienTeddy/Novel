// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Novel.DAL.EF;

namespace Novel.DAL.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    [Migration("20210728120948_Seeding_Database")]
    partial class Seeding_Database
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Novel.DAL.Entities.AppConfig", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("AppConfigs");

                    b.HasData(
                        new
                        {
                            Key = "HomeTitle",
                            Value = "This is home page of Novel"
                        },
                        new
                        {
                            Key = "HomeKeyword",
                            Value = "This is keyword of Novel"
                        },
                        new
                        {
                            Key = "HomeDesciption",
                            Value = "This is description of Novel"
                        });
                });

            modelBuilder.Entity("Novel.DAL.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("Novel.DAL.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("Novel.DAL.Entities.Cart", b =>
                {
                    b.Property<int>("id_cart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("date_create")
                        .HasColumnType("datetime2");

                    b.Property<int>("id_product")
                        .HasColumnType("int");

                    b.Property<Guid>("id_user")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("id_cart");

                    b.HasIndex("id_product");

                    b.HasIndex("id_user");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Novel.DAL.Entities.Category", b =>
                {
                    b.Property<int>("id_category")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsShowOnHome")
                        .HasColumnType("bit");

                    b.Property<int?>("id_parent")
                        .HasColumnType("int");

                    b.Property<int>("sort_order")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("id_category");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            id_category = 1,
                            IsShowOnHome = true,
                            sort_order = 1,
                            status = 1
                        },
                        new
                        {
                            id_category = 2,
                            IsShowOnHome = true,
                            sort_order = 2,
                            status = 1
                        });
                });

            modelBuilder.Entity("Novel.DAL.Entities.CategoryTranslation", b =>
                {
                    b.Property<int>("id_categoryTranslation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("id_category")
                        .HasColumnType("int");

                    b.Property<string>("id_language")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("seo_alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("seo_description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("seo_title")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("id_categoryTranslation");

                    b.HasIndex("id_category");

                    b.HasIndex("id_language");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            id_categoryTranslation = 1,
                            id_category = 1,
                            id_language = "vi-VN",
                            name = "Áo Nam",
                            seo_alias = "ao-nam",
                            seo_description = "Sản phẩm thời trang nam",
                            seo_title = "Sản phẩm thời trang nam"
                        },
                        new
                        {
                            id_categoryTranslation = 2,
                            id_category = 1,
                            id_language = "en-US",
                            name = "Men Shirt",
                            seo_alias = "men-shirt",
                            seo_description = "The shirt product for men",
                            seo_title = "The shirt product for men"
                        });
                });

            modelBuilder.Entity("Novel.DAL.Entities.Contact", b =>
                {
                    b.Property<int>("id_contact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("id_contact");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Novel.DAL.Entities.Language", b =>
                {
                    b.Property<string>("id_language")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("id_language");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            id_language = "vi-VN",
                            IsDefault = true,
                            name = "Tiếng Việt"
                        },
                        new
                        {
                            id_language = "en-US",
                            IsDefault = false,
                            name = "English"
                        });
                });

            modelBuilder.Entity("Novel.DAL.Entities.Order", b =>
                {
                    b.Property<int>("id_order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("id_user")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("order_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ship_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ship_email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ship_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ship_phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("id_order");

                    b.HasIndex("id_user");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Novel.DAL.Entities.OrderDetail", b =>
                {
                    b.Property<int>("id_order")
                        .HasColumnType("int");

                    b.Property<int>("id_product")
                        .HasColumnType("int");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("id_order", "id_product");

                    b.HasIndex("id_product");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Novel.DAL.Entities.Product", b =>
                {
                    b.Property<int>("id_product")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<DateTime>("date_created")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("original_price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("view_count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("id_product");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            id_product = 1,
                            date_created = new DateTime(2021, 7, 28, 19, 9, 47, 43, DateTimeKind.Local).AddTicks(7519),
                            original_price = 100000m,
                            price = 200000m,
                            stock = 0,
                            view_count = 0
                        });
                });

            modelBuilder.Entity("Novel.DAL.Entities.ProductImage", b =>
                {
                    b.Property<int>("id_productImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("caption")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("date_created")
                        .HasColumnType("datetime2");

                    b.Property<long>("file_size")
                        .HasColumnType("bigint");

                    b.Property<int>("id_product")
                        .HasColumnType("int");

                    b.Property<string>("image_path")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("sort_order")
                        .HasColumnType("int");

                    b.HasKey("id_productImage");

                    b.HasIndex("id_product");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Novel.DAL.Entities.ProductInCategory", b =>
                {
                    b.Property<int>("id_category")
                        .HasColumnType("int");

                    b.Property<int>("id_product")
                        .HasColumnType("int");

                    b.HasKey("id_category", "id_product");

                    b.HasIndex("id_product");

                    b.ToTable("ProductInCategories");

                    b.HasData(
                        new
                        {
                            id_category = 1,
                            id_product = 1
                        });
                });

            modelBuilder.Entity("Novel.DAL.Entities.ProductTranslation", b =>
                {
                    b.Property<int>("id_productTranslation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("details")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("id_language")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int>("id_product")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("seo_alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("seo_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("seo_title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_productTranslation");

                    b.HasIndex("id_language");

                    b.HasIndex("id_product");

                    b.ToTable("ProductTranslations");

                    b.HasData(
                        new
                        {
                            id_productTranslation = 1,
                            description = "",
                            details = "Mô tả sản phẩm",
                            id_language = "vi-VN",
                            id_product = 1,
                            name = "Áo sơ mi nam trắng Việt Tiến",
                            seo_alias = "ao-so-mi-nam-trang-viet-tien",
                            seo_description = "Sản phẩm thời trang nam",
                            seo_title = "Sản phẩm thời trang nam"
                        },
                        new
                        {
                            id_productTranslation = 2,
                            description = "",
                            details = "Description of product",
                            id_language = "en-US",
                            id_product = 1,
                            name = "Viet Tien Men T-Shirt",
                            seo_alias = "viet-tien-men-t-shirt",
                            seo_description = "The shirt product for men",
                            seo_title = "The shirt product for men"
                        });
                });

            modelBuilder.Entity("Novel.DAL.Entities.Promotion", b =>
                {
                    b.Property<int>("id_promotion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ApplyForAll")
                        .HasColumnType("bit");

                    b.Property<decimal?>("discount_amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("discount_percent")
                        .HasColumnType("int");

                    b.Property<DateTime>("from_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("id_product")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("id_productCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<DateTime>("to_date")
                        .HasColumnType("datetime2");

                    b.HasKey("id_promotion");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Novel.DAL.Entities.Slide", b =>
                {
                    b.Property<int>("id_slide")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("sort_order")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("id_slide");

                    b.ToTable("Slides");
                });

            modelBuilder.Entity("Novel.DAL.Entities.Transaction", b =>
                {
                    b.Property<int>("id_transaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExternalTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("id_user")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<DateTime>("transaction_date")
                        .HasColumnType("datetime2");

                    b.HasKey("id_transaction");

                    b.HasIndex("id_user");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Novel.DAL.Entities.Cart", b =>
                {
                    b.HasOne("Novel.DAL.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("id_product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Novel.DAL.Entities.AppUser", "AppUser")
                        .WithMany("Carts")
                        .HasForeignKey("id_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Novel.DAL.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("Novel.DAL.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("id_category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Novel.DAL.Entities.Language", "Language")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("id_language")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Novel.DAL.Entities.Order", b =>
                {
                    b.HasOne("Novel.DAL.Entities.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("id_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Novel.DAL.Entities.OrderDetail", b =>
                {
                    b.HasOne("Novel.DAL.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("id_order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Novel.DAL.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("id_product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Novel.DAL.Entities.ProductImage", b =>
                {
                    b.HasOne("Novel.DAL.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("id_product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Novel.DAL.Entities.ProductInCategory", b =>
                {
                    b.HasOne("Novel.DAL.Entities.Category", "Category")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("id_category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Novel.DAL.Entities.Product", "Product")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("id_product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Novel.DAL.Entities.ProductTranslation", b =>
                {
                    b.HasOne("Novel.DAL.Entities.Language", "Language")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("id_language")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Novel.DAL.Entities.Product", "Product")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("id_product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Novel.DAL.Entities.Transaction", b =>
                {
                    b.HasOne("Novel.DAL.Entities.AppUser", "AppUser")
                        .WithMany("Transactions")
                        .HasForeignKey("id_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
